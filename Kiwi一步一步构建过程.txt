Kiwi一步一步构建过程：

1，使用Qt的qmake生成vs项目：
	1，据说，如果环境变量中的qmakespec是win32-msvc2010，则生成vs2010的工程，如果是win32-msvc2008，则生成vs2008的工程。（目前没发现
	2，qmake生成vs工程的用法有两种：
		1，单工程：qmake -tp vc XXX.pro [-spec win32-msvc2008]
		
		单工程：只描述工程自己。
			XXX.pro -> 一个解决方案，一个项目
			
		例：
		vc.pro:	
			QT       += core gui
			greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

			TARGET = vc
			TEMPLATE = app
			SOURCES += main.cpp\
					mainwindow.cpp
			HEADERS  += mainwindow.h
			FORMS    += mainwindow.ui

		
		2，多工程：qmake -tp vc XXX.pro -r [-spec win32-msvc2008]   //多了一个递归
		
		多工程：描述的是子工程。
			XXX.pro	-> 一个解决方案，多个项目
			- test/test.pro
			- framework/framework.pro
			- XXXX/XXXX.pro
		例：
		all.pro:
			TEMPLATE = subdirs	//指定为subdirs，必须小写！
			TARGET = 
			DEPENDPATH += .
			INCLUDEPATH += .

			SUBDIRS = vc \		//此解决方案包含了vc目录下的vc.pro
				      test  	//此解决方案包含了test目录下的test.pro

	3，使用qt的pro管理项目文件，然后生成vs工程，最后在vs IDE上开发。

	
2，使用Qt进行国际化：
	主要有三个工具：
	lupdate		通过pro文件生成ts翻译文件
	lrelease	将ts翻译文件生成pm文件
	linguist	翻译工具，用来编辑ts的翻译内容
	
	lupdate运行的时候，总出现下面的问题，但有时并不影响ts文件的生成（可能成功可能失败）。
	C:/Qt/4.7.1/mkspecs/features/default_post.prf(5):Function 'system' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(66):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(69):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(72):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(75):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(78):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(80):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(82):Function 'eval' is not implemented
	C:/Qt/4.7.1/mkspecs/features/debug_and_release.prf(84):Function 'eval' is not implemented
	
	由于lupdate总是假设源代码里的翻译字段的编码为某一编码，所以最好使用英文，否则产生的ts文件里的翻译字段可能是乱码。
	
	在XXX.pro文件的最后面，添加
	TRANSLATIONS += ../../../i18n/en-US/ui.ts
	TRANSLATIONS += ../../../i18n/pt-BR/ui.ts
	TRANSLATIONS += ../../../i18n/zh-CN/ui.ts
	TRANSLATIONS += ../../../i18n/zh-TW/ui.ts
	
	然后命令行运行：lupdate XXX.pro 即可生成对应的ts文件
	
3，VS的编译+链接选项：
	从VS2008复制出来的编译命令行：
	/I "c:\Qt\4.7.1\include\QtCore" /I "c:\Qt\4.7.1\include" /I "." /I "tmp" /I "c:\Qt\4.7.1\include\ActiveQt" /I "c:\Qt\4.7.1\mkspecs\win32-msvc2008" /D "UNICODE" /D "WIN32" /D "QT_LARGEFILE_SUPPORT" /D "QT_DLL" /D "QT_CORE_LIB" /D "QT_HAVE_MMX" /D "QT_HAVE_3DNOW" /D "QT_HAVE_SSE" /D "QT_HAVE_MMXEXT" /D "QT_HAVE_SSE2" /D "QT_THREAD_SUPPORT" /FD /EHsc /MDd /GS- /Zc:wchar_t- /Fo"tmp\\" /Fd".\\" /W3 /nologo /c /Zi /TP /errorReport:prompt
	
	其中： ## 参考https://msdn.microsoft.com/zh-cn/library/9wst99a9.aspx 或 https://msdn.microsoft.com/zh-cn/library/fwkeyyhe.aspx
	/I 	## 头文件目录
	/D 	## 预定义变量
	/Fo ## 指定obj的目录
	/Fd ## 指定pdb的目录
	/Zc ## 一致性（都是用Unicode
	
	从VS2008复制出来的链接命令行：
	/OUT:"..\bin\hellokiwi.exe" /NOLOGO /LIBPATH:"c:\Qt\4.7.1\lib" /MANIFEST /MANIFESTFILE:"tmp\\hellokiwi.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /SUBSYSTEM:CONSOLE /DYNAMICBASE /NXCOMPAT /ERRORREPORT:PROMPT c:\Qt\4.7.1\lib\QtCored4.lib  kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib
	
	其中：
	/DEBUG	## debug版本
	/LIBPATH	##lib目录
	
	//////////////
	这些命令行是这样执行的：参考编译日志BuildLog.htm
	命令行      
	正在创建临时文件“C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000C120246972.rsp”，其内容为
	[
	/I "c:\Qt\4.7.1\include\QtCore" /I "c:\Qt\4.7.1\include" /I "." /I "tmp" /I "c:\Qt\4.7.1\include\ActiveQt" /I "c:\Qt\4.7.1\mkspecs\win32-msvc2008" /D "UNICODE" /D "WIN32" /D "QT_LARGEFILE_SUPPORT" /D "QT_DLL" /D "QT_CORE_LIB" /D "QT_HAVE_MMX" /D "QT_HAVE_3DNOW" /D "QT_HAVE_SSE" /D "QT_HAVE_MMXEXT" /D "QT_HAVE_SSE2" /D "QT_THREAD_SUPPORT" /FD /EHsc /MDd /GS- /Zc:wchar_t- /Fo"tmp\\" /Fd".\\" /W3 /c /Zi /TP  -Zm200 -w34100 -w34189

	.\main.cpp
	]
	正在创建命令行“cl.exe @C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000C120246972.rsp /nologo /errorReport:prompt”
	正在创建临时文件“C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000D120246972.rsp”，其内容为
	[
	/OUT:"..\bin\hellokiwi.exe" /LIBPATH:"c:\Qt\4.7.1\lib" /MANIFEST /MANIFESTFILE:"tmp\\hellokiwi.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /DEBUG /SUBSYSTEM:CONSOLE /DYNAMICBASE /NXCOMPAT c:\Qt\4.7.1\lib\QtCored4.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib

	".\tmp\main.obj"
	]
	正在创建命令行“link.exe @C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000D120246972.rsp /NOLOGO /ERRORREPORT:PROMPT”
	正在创建临时文件“C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000E120246972.rsp”，其内容为
	[
	/outputresource:"..\bin\hellokiwi.exe;#1" /manifest

	.\tmp\hellokiwi.exe.intermediate.manifest
	]
	正在创建命令行“mt.exe @C:\Users\ADMINI~1\AppData\Local\Temp\RSP00000E120246972.rsp /nologo”
	正在创建临时文件“C:\Users\ADMINI~1\AppData\Local\Temp\BAT00000F120246972.bat”，其内容为
	[
	@echo 清单资源上次更新时间为 %TIME%，更新位置为 %DATE% > .\tmp\mt.dep
	]
	正在创建命令行“C:\Users\ADMINI~1\AppData\Local\Temp\BAT00000F120246972.bat”

	可见：执行过程是cl.exe -> link.exe -> mt.exe -> *.bat
	/////////////
	
	msbuild.exe/cl.exe/link.exe/nmake.exe/devenv.exe/ml.exe/rc.exe/mt.exe/lib.exe
	//这个帖子总结得不错，可参考http://blog.csdn.net/xiexievv/article/details/45775005
	
	msbuild.exe：比较强大，基本是命令行下的VS，可以在命令行下执行VS相关的操作，比如clean、build、rebuild、配置项目属性等。	
	参考https://msdn.microsoft.com/zh-cn/library/dd293607.aspx和github：https://github.com/Microsoft/msbuild
	1，配置VS项目；## /p:config=value 通过使用属性命令行选项 (/p)，您可以在项目生成文件中重写属性。
		msbuild myproject.vcxproj /p:configuration=debug /p:platform=win32 ##重写myproject.vcxproj项目文件里面的configuration和platform属性
	2，生成VS项目：## /t:cmd
		msbuild myproject.vcxproj /p:configuration=debug ##编译构建myproject.vcxproj的DEBUG版本。
		msbuild myproject.vcxproj /t:rebuild
		myproject ##生成后，调用程序
	缺点：依赖于.Net Framework 4.5.1以上，安装庞大；且只支持vcxproj而不支持vs2008的vcproj，后者需要转换。
		
	devenv.exe：VS的界面运行程序devenv.exe，也可以在命令行设置参数运行devenv.com。后者可用来设置集成开发环境 (IDE) 的各个选项，以及从命令行生成、调试和部署项目。【对于与编译构建相关的任务，现在推荐使用 MSBuild，而非 devenv】
		一些例子：##更多参考https://msdn.microsoft.com/zh-cn/library/xee0c8y7.aspx 或直接devenv /?
		devenv myproj.csproj /build /out log.txt ##生成时指定一个文件接收错误。
		devenv myproj.csproj /clean ##清理项目
		devenv myproj.csproj /build ##编译构建
		devenv myproj.csproj /build Debug ##编译构建Debug版本

	cl.exe：VS的编译工具，无论是使用IDE，还是命令行MSBuild，最终编译*.cpp文件的还是cl.exe【将.c，.cpp，.cxx编译成obj文件】
	link.exe：VS的链接工具，同上，无论是使用IDE，还是命令行MSBuild，最终都是调用link.exe来链接.obj和.lib等文件来生成目标。【将obj、lib、res链接成dll或exe等可执行文件】
	nmake.exe：Windows下的make工具，解析makefile来自动编译构建项目。仍旧需要使用cl.exe编译器（或其它编译器）和link.exe链接器(或其它链接器)。【执行makefile构建dll或exe等目标】
	CMake是一个跨平台的安装(编译)工具,可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件,能测试编译器所支持的C++特性,类似UNIX下的automake。
	ml.exe：汇编的编译工具，MASM编译工具。64位为ml64.exe。masm and link。【将.asm编译生成.obj文件，貌似可以直接生成exe可执行文件】
		
	rc.exe：Windows资源编译器工具，将例如游标、图标、位图、对话框和字体的资源编译为一个资源 (.res) 文件。【将.rc资源文本转变成.res二进制文件】
	lib.exe：具体不太清楚，貌似是用于提取dll的def文件。参考https://msdn.microsoft.com/zh-cn/library/0xb6w1f8.aspx
	mt.exe：清单文件生成工具。项目>属性>链接器>清单文件>生成清单>是/否。生成一个*.manifest清单文件和mt.dep生成清单的日期文件。

	【清单：https://msdn.microsoft.com/zh-cn/library/ms235605.aspx
	在命令行中使用 nmake 或类似工具生成 C/C++ 应用程序时，将在链接器处理完所有对象文件并生成最终二进制文件后生成清单。链接器收集存储在对象文件中的程序集信息，并将此信息合并到最终清单文件中。默认情况下，链接器将生成一个名为<binary_name>.<extension>.manifest 的文件，用于描述最终二进制文件。链接器不会将清单文件嵌入此二进制文件中，只能将清单生成为外部文件。有几种方法可将清单嵌入最终二进制文件中，如使用清单工具 (mt.exe) 或将清单编译为资源文件。切记：将清单嵌入最终二进制文件中时，必须遵守特定的规则，这样才能启用诸如增量链接、签名、编辑并继续等功能。 如何：将清单嵌入到 C/C++ 应用程序 中讨论了在命令行生成清单时使用的这些功能及其他选项。】

	VS新版本(VS2015)项目后缀：参考：https://msdn.microsoft.com/zh-cn/library/ee862524.aspx
	.vcproj 现在为 .vcxproj Visual Studio 会自动将在 Visual C++ 早期版本中创建的项目文件转换为当前系统所用的格式。有关如何手动升级项目的更多信息，请参见 /Upgrade (devenv.exe)。
	.vsprops 现在为 .props 在早期版本中，项目属性表是具有 .vsprops 文件扩展名的、基于 XML 的文件。使用项目属性表可以为生成工具（如编译器或链接器）指定开关并创建用户定义的宏。
在当前2015版本中，项目属性表的文件扩展名为 .props。
	.vcxproj.user 文件
	用户文件 (.vcxproj.user) 存储特定于用户的属性，例如调试和部署设置。vcxproj.user 文件应用于特定用户的所有项目。
	
4，QT pro文件详解
	参考http://doc.qt.io/qt-4.8/qmake-variable-reference.html

	示例：
	message($$_PRO_FILE_) ##http://doc.qt.io/qt-5/qmake-variable-reference.html

	QT_VERSION = 4.7.1	##指定QT版本

	QT -= gui ## Only the core module is used.By default, QT contains both core and gui

	TEMPLATE = app
	TARGET = hellokiwi
	CONFIG += console
	DEFINES += 

	RCC_DIR = ./tmp		## RCC文件存放目录
	MOC_DIR = ./tmp		## MOC文件存放目录
	OBJECTS_DIR = ./tmp ## 临时OBJ文件存放目录	 - 生成VS项目文件时，也会将此目录配置为中间文件存放目录

	QMAKE_CLEAN += ./tmp ## clean时清除的目录

	DESTDIR = ../bin
	DLLDESTDIR = ../bin
	INCLUDEPATH = ./ ./tmp	## 临时目录里有对应的头文件，因此要包含
	win32:INCLUDEPATH += ./
	win32:LIBS += 

	RESOURCES +=

	OBJECTS += ## Specify the extension of each source file is replaced by .o (Unix) or .obj (Win32). You can add objects to the list.
	SOURCES += main.cpp

	##总体思路是，由pro管理Linux和Windows下的两个版本。Linux下直接使用pro文件，Windows下通过qmake将pro文件转换为VS的项目文件，并使用VS进行开发（转换过程实现配置的转换，以便转换后不需再配置VS）。
	
5，可重入与线程安全与类型安全：
	可重入的（Reentrant）：如果多个线程可以在同一时刻调用一个类的所有函数，并且保证每一次函数调用都引用一个唯一的数据，就称这个类是可重入的（Reentrant means that all the functions in the referenced class can be called simultaneously by multiple threads, provided that each invocation of the functions reference unique data.）。大多数C++类都是可重入的。类似的，一个函数被称为可重入的，如果该函数允许多个线程在同一时刻调用，而每一次的调用都只能使用其独有的数据。全局变量就不是函数独有的数据，而是共享的。换句话说，这意味着类或者函数的使用者必须使用某种额外的机制（比如锁）来控制对对象的实例或共享数据的序列化访问。
	
	线程安全（Thread-safe）：如果多个线程可以在同一时刻调用一个类的所有函数，即使每一次函数调用都引用一个共享的数据，就说这个类是线程安全的（Threadsafe means that all the functions in the referenced class can be called simultaneously by multiple threads even when each invocation references shared data.）。如果多个线程可以在同一时刻访问函数的共享数据，就称这个函数是线程安全的。	
	
	类型安全（Type-safe）：
	类型安全是指我们使用一个类的指针在调用类的函数或传递类的对象时，该指针“确实”是指向我们所规定的类的对象。也可以说是指针的指向 类型的转换 精度的丢失 异常的保护等。也可以这样理解：类型安全的模块，如果传递了非识别的类型，将能使编译器编译错误，让人知道类型错误。
	例如：
	class A;
	A *p=new A;
	p->func();   //类型不安全，我们不能保证指针p 
				//“确实”指向类A的一个对象，因为前面的new可能不成功。
	或者
	Pointer A = new B();	//如果类型安全，这个语句将会导致编译错误。因为B指针不能赋予A指针。
	像C的union，结构体等可以任意赋值，这就是类型不安全。
	


7，本来打算使用QT的QCoreApplication来做一个命令行终端，但是QT的QCoreApplication并不支持键盘事件，因此即使监听它的事件，也无法获取键盘按键信息。
	所以，放弃了使用QT的终端程序，而使用了getch()方式实现，头文件为conio.h。
	conio.h是Windows终端的头文件，在Linux下也有一个对应的兼容性版本，理论上可以跨平台。
	
	但是，conio.h虽然可以捕获键盘事件，但是在下一行删除到尽头的时候，退格不会自动跳到上一行而导致修改输入变得不可控。
	
	为什么需要conio.h呢？因为需要在command-line模式下监听键盘事件，以便在Tab的时候实现自动补全。
	其实，这里完全可以自己实现一个命令行窗口，窗口的标题、样式、布局都是自己实现的，这样命令行的输入监控就变成了对一个控件的监控。这种自己实现命令行窗口的做法，可以轻易实现在用户输入的时候监控键盘行为。只是，这样的程序是以窗口形式存在的，鼠标右键菜单等都需要自己实现，其次最根本的是它以GUI形式存在，如果在Linux的文本模式下将无法运行。
	
	然而，开发这个工具的出发点是，它以文本模式存在，能够在Windows命令行或者Linux的shell下生存并临时接管它们的一些键盘事件（这样说来，可以使用hook，像Windows下hook到命令行窗口的事件）。

	还有一个跨平台做命令行的库叫Ncurses，不过在Windows下貌似需要使用mingw编译，所以没有选择Ncurses

	http://www.codeproject.com/Articles/2357/Console-Event-Handling
	
8，	
	http://www.codeproject.com/Articles/6614/Generic-Observer-Pattern-and-Events-in-C
	//所有的mt_policy其实是库定义的三种锁策略而已[单线程无锁、多线程共享全局锁、多线程局部锁]

TODO sigslot.h与QT的整合：sigslot.h要先于QT库引入，否则会编译失败。
TODO QObject基类在多重继承时的位置：放在首位，因为moc.exe是根据首位对象来生成成员metaObject，否则编译失败。
TODO VS2008没有自动执行moc.exe的问题，要讲moc_XXX.cpp加入到源文件才能通过编译。http://vperi.com/2012/04/23/automatic-mocing-in-visual-studio/

9，命令行的历史记录实现：
	历史记录需要：上一条、下一条、当前位置、历史记录位置
	   1 2 3 4 5 
	   * 
		 * * * *   len = 5;
	   |           index = 0 last = 4 next = 1
		 |         index = 1 last = 0 next = 2
		   |
			 |
			   |   index = 4 last = 3 next = 0
			   
10，VS配置项。
	VS IDE打开一个项目文件时，默认加载配置文件里第一个配置，一般配置文件里都有Debug和Release，而且Debug总在最前面，所以VS IDE打开一个新的项目时，总是默认选中Debug配置。
	VS IDE打开了一个项目后，选中Release，保存，此时VS IDE不是更改项目的配置文件，而是保存到VS IDE自身的配置文件里，将sln和对应是Debug还是Release配置绑定，因此下一次打开这个文件时，就能默认选中Release。
	要通过配置文件，在打开时默认选中Release编译配置，只能将Release配置放在第一位。
	
11，控制台开发的相关资料
	http://www.cnblogs.com/tocy/p/Console-Introduction.html
	http://www.cnblogs.com/tocy/p/console_intro_sample.html
	http://www.bubuko.com/infodetail-491746.html
	https://msdn.microsoft.com/en-us/library/windows/desktop/ms682073(v=vs.85).aspx
	http://stackoverflow.com/questions/2492077/output-unicode-strings-in-windows-console-app
	http://ask.webatall.com/windows/16539_c-console-keyboard-events.html
	C++控制台操作
	http://blog.csdn.net/stude/article/details/7645056

	控制台程序
	https://msdn.microsoft.com/en-us/library/ms682010(v=vs.85).aspx
	
	1，控制台程序是运行在文本模式下的程序，没有GUI，所以没有任何消息循环。
	2，控制台程序的GUI是csrss.exe创建的，所以控制台的消息循环是到达了csrss.exe。csrss.exe将消息转换为控制台对象，然后插入到控制台STDIN队列里，所以如果想在控制台下处理键盘、鼠标等事件，则需要从STDIN里面读取序列，而不是通过Windows的消息循环（Windows的消息循环只针对GUI程序）。
	3，Windows控制台有一系列API，其中有上层API（High-Level Input and Output）和底层API（Low-Level Input and Output）。上层API过滤了事件，队列里只有字符。底层API能够读取事件和字符。
	4，Linux控制台和Windows控制台类似，仍旧没有事件消息，只能从STDIN里读取，只不过Linux能够从STDIN里读取到的信息相对比较多。（暂时未对Linux下的控制台进行了解）
	5，控制台程序和GUI程序的区别：
		1，控制台程序能在命令行里运行打开，直接在命令行里运行，并不会创建新的窗口，而GUI程序则会弹出新的窗口。像Linux，如果在文本模式终端下，只能运行文本模式的程序，而不能运行GUI程序。Windows下没有文本模式终端的概念，因此控制台程序和GUI程序的区别不明显。
		2，就是上面的，GUI程序才有消息循环，而控制台程序并没有消息循环。HOOK控制台程序是收不到任何消息的。
		
	The events are posted to the active window. Console windows are owned by the console subsystem, csrss.exe, and it receives the events, then translates them to characters and puts them in the console object which is your application's stdin.
	If you want to process events the Win32 GUI way, you should use a Win32 window (e.g. RegisterClass and CreateWindow), not a console window.

	控制台的默认处理，能够显示用户的输入，能够通过Backspace来删除字符，能够通过左右键移动光标，并能对上下方向键进行历史切换，右方向键进行buffer填充。默认的控制台和我们需要的控制台的唯一缺少的就是TAB键，默认控制台需要等待回车键才进行按键解析，因此不适合做TAB自动补全。
	本来打算使用控制台默认的ENABLE_ECHO_INPUT来默认处理输入，但是要启用这个flag必须同时启用ENABLE_LINE_INPUT，意味着如果使用这种方式实现TAB自动补全，需要按回车键确认输入。
	然而，TAB自动补全是不需要按回车键确认输入的，而是TAB键按下即返回。
	所以，不能使用控制台默认的ENABLE_ECHO_INPUT来自动处理用户的输入，只能通过禁用了ENABLE_ECHO_INPUT和ENABLE_LINE_INPUT的ReadConsole或ReadConsoleInput实现。只是，这样实现需要自行处理Backspace、左右光标移动、上下历史切换、右方向buffer填充这些基本功能。

	另外虽然在C++中，iostream.h定义了cin和cout的标准输入和输出流对象。但它们只能实现基本的输入输出 操作，对于控制台窗口界面的控制却无能为力，而且不能与stdio.h和conio.h友好相处，因为iostream.h和它们是C++两套不同的输入输出操作方式，使用时要特别注意。

	对于控制台程序，GNU有一个叫Readline的库，可以提供控制台下的读取、编辑、历史记录等功能，不过是GPL开源协议，意味着必须公开源码。

12，codepage，代码页，也叫字符集。
	说代码页的时候，比较难理解，其实它就是字符集，比如gbk、Unicode等字符集。
	控制台程序也有自己的代码页，Windows控制台默认的代码页是936（ANSI/OEM -简体中文 GBK），可以控制台属性-选项里查看当前代码页。
	代码页：https://msdn.microsoft.com/en-us/library/windows/desktop/dd317756(v=vs.85).aspx
	部分代码页列表：
	Identifier	.NET Name	Additional information
	869	ibm869	OEM Modern Greek; Greek, Modern (DOS)
	870	IBM870	IBM EBCDIC Multilingual/ROECE (Latin 2); IBM EBCDIC Multilingual Latin 2
	874	windows-874	ANSI/OEM Thai (ISO 8859-11); Thai (Windows)
	875	cp875	IBM EBCDIC Greek Modern
	932	shift_jis	ANSI/OEM Japanese; Japanese (Shift-JIS)
	》936	gb2312	ANSI/OEM Simplified Chinese (PRC, Singapore); Chinese Simplified (GB2312)
	949	ks_c_5601-1987	ANSI/OEM Korean (Unified Hangul Code)
	950	big5	ANSI/OEM Traditional Chinese (Taiwan; Hong Kong SAR, PRC); Chinese Traditional (Big5)
	1026	IBM1026	IBM EBCDIC Turkish (Latin 5)
	1200	utf-16	Unicode UTF-16, little endian byte order (BMP of ISO 10646); available only to managed applications
	1201	unicodeFFFE	Unicode UTF-16, big endian byte order; available only to managed applications
	1361	Johab	Korean (Johab)
	12000	utf-32	Unicode UTF-32, little endian byte order; available only to managed applications
	12001	utf-32BE	Unicode UTF-32, big endian byte order; available only to managed applications
	51932	euc-jp	EUC Japanese
	51936	EUC-CN	EUC Simplified Chinese; Chinese Simplified (EUC)
	51949	euc-kr	EUC Korean
	51950		EUC Traditional Chinese
	52936	hz-gb-2312	HZ-GB2312 Simplified Chinese; Chinese Simplified (HZ)
	54936	GB18030	Windows XP and later: GB18030 Simplified Chinese (4 byte); Chinese Simplified (GB18030)
	65000	utf-7	Unicode (UTF-7)
	》65001	utf-8	Unicode (UTF-8)

13，控制台输出中文问题：
	
	cout和wcout与printf和wprintf最好不要混用。
	printf和wprintf是C语言的函数，C语言的locale只有全局设置，这会导致cout和wcout不能输出中文。
	cout和wcout是C++语言的函数，C++的locale支持以下分类设置。

	1、语言符号及其分类(LC_CTYPE) 
	2、数字(LC_NUMERIC) 
	3、比较和排序习惯(LC_COLLATE) 
	4、时间显示格式(LC_TIME) 
	5、货币单位(LC_MONETARY) 
	6、信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等(LC_MESSAGES) 
	7、姓名书写方式(LC_NAME) 
	8、地址书写方式(LC_ADDRESS) 
	9、电话号码书写方式(LC_TELEPHONE) 
	10、度量衡表达方式 (LC_MEASUREMENT) 
	11、默认纸张尺寸大小(LC_PAPER) 
	12、对locale自身包含信息的概述(LC_IDENTIFICATION)。
	
	using namespace std;
	wcout.imbue(locale("chs"));	//全局设置，Warning：这样设置后wcout << 12345会输出12,345，因为同时设置了数值的显示方式 
        wcout.imbue(locale(locale(),"",LC_CTYPE));	//局部设置，只设置语言符号等，只影响中文语言，不影响数值等的显示方式，""（不是NULL）表示locale与本地环境所使用的编码方式相同
	
	控制台有设置代码页的函数：
	SetConsoleCP(65001)		//设置输入代码页
	SetConsoleOutputCP(65001)	//设置输出代码页（输出代码页如果设置为UTF-8，会导致终端的字体发生变化，甚至不能输入中文）
	1，输入输出代码页都设为ANSI（默认），可以输入中文，但是无法输出中文，需要使用wcout.imbue函数。
	2，输入输出代码页都设为UTF-8，导致无法输入中文，所以也就无法输出中文。
	3，只将输入代码页改为UTF-8，可以输入中文，只是由于输出代码页是ANSI，因此无法使用wcout输出中文，仍旧要使用wcout.imbue函数。

	使用这两个函数不能解决输出中文的问题。

	ReadConsoleInput读取控制台输入的中文，得到的是中文的Unicode编码。
	Windows内部貌似统一使用Unicode编码，而在界面展示的时候，通过转换将Unicode编码转换为ANSI编码（或其它本地化编码）以达到不同国家显示的界面语言不同（个人猜测）。
	所以设置了wcout.imbue的时候，wcout就会对标准的Unicode转换为对应的字符编码集显示。
	
	Windows下可以使用以下两个API进行编码转换，实现Unicode（UCS2），UTF8，GBK（GB2312）互转。
	Warning：如果第五个参数为0，函数返回目标缓冲区所必须的字符数；否则，函数转换成功转换的字符数，函数失败时，返回0。所以第一次是获取缓冲区空间。
	
	//Unicode转为ANSI或UTF8
	nCodePage = CP_UTF8 or CP_ACP; //即上面的65001或936的宏。如果是CP_UTF8则表示UTF8与Unicode互转。如果是CP_ACP则表示ANSI与Unicode互转。
	nCount = WideCharToMultiByte(nCodePage, 0, wStr, -1, NULL, 0, NULL, NULL);  //the4th为-1，根据0结束符自动判断lpMultiByteStr指定的字符串的长度，否则要手动指定字符串的长度！！
	pStr = new char[nCount];  
	nCount = WideCharToMultiByte(nCodePage, 0, wStr, -1, pStr, nCount, NULL, NULL);  

	//ANSI或UTF8转为Unicode
	memset(wStr, 0, sizeof(wStr));  
	nWCount = MultiByteToWideChar(nCodePage, 0, pStr, nCount, wStr, 0);  
	nWCount = MultiByteToWideChar(nCodePage, 0, pStr, nCount, wStr, nWCount);  
	
	例子，使用API将控制台输入的Unicode转换为控制台的ANSI以便输出：
	WCHAR wStr = (WCHAR)ir.Event.KeyEvent.uChar.UnicodeChar;
        int nCount = WideCharToMultiByte(CP_ACP, 0, &wStr, 1, NULL, 0, NULL, NULL); 
        char *pStr = new char[nCount+1];  
        nCount = WideCharToMultiByte(CP_ACP, 0, &wStr, 1, pStr, nCount, NULL, NULL); 
        pStr[nCount] = '\0';
        std::cout << pStr << std::flush;

	总结：
	通过wcout.imbue或WideCharToMultiByte可以实现终端输入中文并打印出来。

14，按键虚拟键值（VirtualKeyCode）与虚拟扫描码（VirtualScanCode）与控制键状态（ControlKeyState）
	键盘上每一个有意义的键都对应着一个唯一的扫描码，虽然扫描码可以作为键的标识，但它依赖于具体设备的。
	因此，在应用程序中，使用的往往是与具体设备无关的虚拟键值。这种虚拟键值是与设备无关的键盘编码。
	在Visual C++中，最常用的虚拟键代码已被定义在Winuser.h中，例如：VK_SHIFT表示SHIFT键，VK_F1表示功能键F1等。
	ControlKeyState用来表示控制键状态，它可以是
		CAPSLOCK_ON(CAPS LOCK灯亮)、
		ENHANCED_KEY(按下扩展键)、
		LEFT_ALT_PRESSED(按下左ALT键)、 
		LEFT_CTRL_PRESSED(按下左CTRL键)、
		NUMLOCK_ON (NUM LOCK灯亮)、
		RIGHT_ALT_PRESSED(按下右ALT键)、
		RIGHT_CTRL_PRESSED(按下右CTRL键)、 
		SCROLLLOCK_ON(SCROLL LOCK灯亮)和
		SHIFT_PRESSED(按下SHIFT键)中的一个或多个值的组合。

15，软件开源授权问题，以下是一些开源协议：
	基本上，使用到开源代码，
	- 代码的版权声明是不能删除的，同时修改了也应当进行说明。
	- 在自己的版权声明中也应当附带这些开源代码以及版权声明。
	- 免责，即使用了开源软件导致的损失，开源作者不附带任何责任。
	- 都可以商用，只是要符合对应的商用约束。
	- 除了商用，都可以任意修改，任意发布。
	- 如果自己使用而不发布，不需要任何约束，可以自便。

	No license：保留所有授权。即禁止别人做任何操作。

	GPL：任意修改任意发布，只是在发布的时候必须也公布源码。
		商业用途：
			- 可以商用，但必须同时公布源码。
	LGPL：任意修改任意发布，如果以dll等库的形式作为使用，则不要求公布源码。
		商业用途：
			- 仅作为链接库使用，则没有任何限制。
	BSD：任意修改任意发布
		商业用途：
		　　- 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。
		　　- 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。
		　　- 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。
	Apache：任意修改任意发布，商业用途约束和BSD类似
		商业用途：
			- 需要给代码的用户一份Apache Licence
		　　- 如果你修改了代码，需要再被修改的文件中说明。
		　  - 在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。
			- 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。
			- Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。
	MIT：任意修改任意发布，商业用途约束和BSD类似，而且要更宽松。
		商业用途：
			- 保留原作者的版权声明即可。
	
	Mozilla：GPL与BSD之间的商用问题的一个折中协议。
	Eclipse：对商业软件非常友好。（估计又是一个类BSD的协议）

	综上：
	其实大部分的开源协议都允许商用而不公开源码，只有GPL是特例。所以，商用软件可以使用除GPL的开源软件代码。
	只是商用的时候，一般都遵循相应的商用约束，要保留原来的协议版权声明。

	在中国，GPL随便用，问题不大；LGPL作为库使用的时候，可以不开源；国际化的商用，则找BSD、MIT、Apache等协议。

